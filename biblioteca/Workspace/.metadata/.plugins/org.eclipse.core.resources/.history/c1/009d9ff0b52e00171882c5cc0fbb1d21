package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import modelo.Endereco;
import modelo.Usuario;

public class UsuarioDAO implements InterfaceUsuarioDAO 
{

	private Connection conexao;
	
	public UsuarioDAO(Connection _conexao) 
	{
		this.conexao = _conexao;
	}
	
	@Override
	public void inserir(Usuario _usuario) throws SQLException 
	{
		
		String comando = "insert into usuario (cod_usuario, cpf, idade, telefone, nome, email, reservas, preferencias) " 
		+ "values (?, ?, ?, ?, ?, ?, ?, ?)";

		PreparedStatement ps = this.conexao.prepareStatement(comando);
		
		ps.setInt(1, _usuario.getCod_usuario());
		ps.setInt(2, _usuario.getCpf());
		ps.setInt(3, _usuario.getIdade());
		ps.setInt(4, _usuario.getTelefone());
		ps.setString(5, _usuario.getNome());
		ps.setString(6, _usuario.getEmail());
		
		ps.execute();
		
		for (Usuario item : _usuario.getReservas()) 
		{
			
			ReservaDAO daoReserva = new ReservaDAO(this.conexao);
			daoReserva.inserir(item);		
		}
		
		for (Usuario item : _usuario.getPreferencias()) 
		{
			
			PreferenciaDAO daoPreferencias = new PreferenciaDAO(this.conexao);
			daoPreferencias.inserir(item);		
		}

	}

	@Override
	public Boolean deletar(int _cod_usuario) throws SQLException 
	{
		
		String comando = "delete from usuario where cod_usuario = ?";

		PreparedStatement ps = this.conexao.prepareStatement(comando);
		
		ps.setInt(1, _cod_usuario);
		
		return ps.execute();
	}

	@Override
	public Boolean atualizar(Usuario _usuario) throws SQLException 
	{		
		String comando = "update usuario set "
				+ "cpf = ?, "
				+ "telefone = ?, "
				+ "nome = ?, "
				+ "email = ? "
				+ "where cod_usuario = ?";

		PreparedStatement ps = this.conexao.prepareStatement(comando);
		
		ps.setInt(1, _usuario.getCpf());
		ps.setInt(2, _usuario.getTelefone());
		ps.setString(3, _usuario.getNome());
		ps.setString(4, _usuario.getEmail());
		
		ps.setInt(5, _usuario.getCod_usuario());

		return ps.execute();
	}

	@Override
	public Usuario buscarPorCod(int _cod) throws SQLException 
	{
		Usuario u = null;
		
		String comando = "select * from usuario where cod_usuario = ?";
		
		PreparedStatement ps = this.conexao.prepareStatement(comando);
		
		ps.setInt(1, _cod);
		
		ResultSet rs = ps.executeQuery();
		
		if (rs.next()) 
		{
			u = new Usuario();
			u.setCod_usuario(rs.getInt(1));
			u.setCpf(rs.getInt(2));
			u.setIdade(rs.getInt(3));
			u.setTelefone(rs.getInt(4));
			u.setNome(rs.getString(5));
			u.setEmail(rs.getString(6));
			
			ReservaDAO daoReserva = new ReservaDAO(this.conexao);
			List<Reserva> reservas = daoReserva.buscarReservaDoUsuario(u.getCod_usuario());
			u.setReservas(reservas);
			
			PreferenciaDAO daoPreferencia = new PreferenciaDAO(this.conexao);
			List<Preferencia> preferencias = daoPreferencia.buscarPreferenciaDoUsuario(u.getCod_usuario());
			u.setPreferencias(preferencias);
		}
		
		return u;
	}

	@Override
	public List<Usuario> listarTodos() throws SQLException 
	{
		List<Usuario> listaUsuarios = new ArrayList<Usuario>();
		
		String comando = "select * from usuario";
		
		PreparedStatement ps = this.conexao.prepareStatement(comando);
		
		ResultSet rs = ps.executeQuery();
		
		while (rs.next()) 
		{			
			int cod_usuario = rs.getInt(1);
			int cpf = rs.getInt(2);
			int idade = rs.getInt(3);
			int telefone = rs.getInt(4);
			String nome = rs.getString(5);
			String email = rs.getString(6);
						
			ReservaDAO daoReserva = new ReservaDAO(this.conexao);
			List<Reserva> reservas = daoReserva.buscarReservaDoUsuario(cod_usuario);
			
			PreferenciaDAO daoPreferencia = new PreferenciaDAO(this.conexao);
			List<Preferencia> preferencias = daoPreferencia.buscarPreferenciaDoUsuario(cod_usuario);
			
			listaUsuarios.add(new Usuario(cod_usuario, cpf, idade, telefone, nome, email, reservas, preferencias));//VOLTAR AQUI
		}
		
		return listaUsuarios;
	}

}
